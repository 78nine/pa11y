#!/usr/bin/env node
'use strict';

var extend = require('node.extend');
var pkg = require('../package.json');
var program = require('commander');
var pa11y = require('../lib/pa11y');

configureProgram(program);
runProgram(program);

function configureProgram (program) {
	program.version(pkg.version)
		.usage('[options] <url>')
		.option('-s, --standard <name>', 'the accessibility standard to use: Section508, WCAG2A, WCAG2AA (default), WCAG2AAA')
		.option('-r, --reporter <reporter>', 'the reporter to use: cli (default), csv, html, json', 'cli')
		.option('-l, --level <level>', 'the level of message to fail on (exit with code 2): error, warning, notice', 'error')
		.option('-c, --config <path>', 'a JSON config file', './pa11y.json')
		.option('-p, --port <port>', 'the port to run PhantomJS on')
		.option('-t, --timeout <ms>', 'the timeout in milliseconds')
		.option('-d, --debug', 'output debug messages')
		.parse(process.argv);
	program.url = program.args[0];
}

function runProgram (program) {
	if (!program.url || program.args[1]) {
		program.help();
	}
	var options = processOptions(program);
	options.log.begin(program.url);
	pa11y(options, function (error, test, exit) {
		if (error) {
			options.log.error(error.stack);
			process.exit(1);
		}
		test(program.url, function (error, results) {
			if (error) {
				options.log.error(error.stack);
				process.exit(1);
			}
			options.log.results(results, program.url);
			exit();
			if (reportShouldFail(program.level, results)) {
				process.exit(2);
			}
		});
	});
}

function processOptions (program) {
	var options = extend(true, {}, loadConfig(program.config), {
		log: loadReporter(program.reporter),
		phantom: {
			port: program.port
		},
		standard: program.standard,
		timeout: program.timeout
	});
	if (!program.debug) {
		options.log.debug = function () {};
	}
	return options;
}

function loadConfig (filePath) {
	return requireFirst([
		filePath,
		filePath.replace(/^\.\//, process.cwd() + '/'),
		process.cwd() + '/' + filePath
	], {});
}

function loadReporter (name) {
	return requireFirst([
		'../reporter/' + name,
		'pa11y-reporter-' + name
	], pa11y.defaults.log);
}

function requireFirst (stack, defaultReturn) {
	if (!stack.length) {
		return defaultReturn;
	}
	try {
		return require(stack.shift());
	}
	catch (error) {
		return requireFirst(stack, defaultReturn);
	}
}

function reportShouldFail (level, results) {
	if (level === 'none') {
		return false;
	}
	if (level === 'notice') {
		return (results.length > 0);
	}
	if (level === 'warning') {
		return (results.filter(isWarningOrError).length > 0);
	}
	return (results.filter(isError).length > 0);
}

function isError (result) {
	return (result.type === 'error');
}

function isWarningOrError (result) {
	return (result.type === 'warning' || result.type === 'error');
}
